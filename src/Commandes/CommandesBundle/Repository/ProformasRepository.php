<?php

namespace Commandes\CommandesBundle\Repository;

/**
 * ProformasRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProformasRepository extends \Doctrine\ORM\EntityRepository
{

    public function idfact($user)
    {
        $qb = $this->createQueryBuilder('u')
            ->Select('u')
            ->orderBy('u.nf', 'DESC')
            ->where('u.user = :user')
            ->setMaxResults(1)
            ->setParameter('user', $user);
        return $qb->getQuery()->getResult();
    }

    public function findByType($type,$user)
    {
        $qb = $this->createQueryBuilder('u')
            ->Select('u')
            ->Where('u.type = :type')
            ->andWhere('u.user = :user')
            ->setParameter('type', $type)
            ->setParameter('user', $user);

        return $qb->getQuery()->getResult();
    }

    public function findLast($user) {
        $qb = $this->createQueryBuilder('u')
            ->where('u.user = :user')
            ->setMaxResults(1)
            ->orderBy('u.id', 'DESC')
            ->setParameter('user', $user);
        return $qb->getQuery()->getResult();
    }

    public function search($etat,$type,$du,$au,$zone,$mot,$user)
    {
        $qb = $this->createQueryBuilder('u')
            ->Select('u')
            ->leftJoin('u.zonnestocks', 'z')
            ->innerJoin('u.acheteur', 'a')
            ->innerJoin('u.ventes', 'v')
            ->andWhere('u.etat = :etat')
            ->andWhere('u.type = :type')
            ->andWhere('u.datecreation >= :du')
            ->andWhere('u.datecreation <= :au')
            ->andWhere('a.nom LIKE :value OR a.prenom LIKE :value OR a.nif LIKE :value OR a.nrc LIKE :value OR u.nf LIKE :value OR v.name LIKE :value OR v.totalHT LIKE :value OR v.totalTTC LIKE :value')
            ->andWhere('z.id = :zone')

            ->andWhere('u.user = :user')
            ->setParameter('etat', $etat)
            ->setParameter('type', $type)
            ->setParameter('du', $du)
            ->setParameter('au', $au)
            ->setParameter('zone', $zone)
            ->setParameter('value', '%'.$mot.'%')
            ->setParameter('user', $user);
        ;
        return $qb->getQuery()->getResult();
    }
    public function search2($etat,$type,$du,$au,$mot,$user)
    {
        $qb = $this->createQueryBuilder('u')
            ->Select('u')
            ->innerJoin('u.acheteur', 'a')
            ->innerJoin('u.ventes', 'v')
            ->andWhere('u.etat = :etat')
            ->andWhere('u.type = :type')
            ->andWhere('u.datecreation >= :du')
            ->andWhere('u.datecreation <= :au')
            ->andWhere('a.nom LIKE :value OR a.prenom LIKE :value OR a.nif LIKE :value OR a.nrc LIKE :value OR u.nf LIKE :value OR v.name LIKE :value OR v.totalHT LIKE :value OR v.totalTTC LIKE :value')
            ->andWhere('u.user = :user')


            ->setParameter('etat', $etat)
            ->setParameter('type', $type)
            ->setParameter('du', $du)
            ->setParameter('au', $au)
            ->setParameter('value', '%'.$mot.'%')
            ->setParameter('user', $user);
        ;
        return $qb->getQuery()->getResult();
    }


    public function delete($facture,$user)
    {
        $qb = $this->createQueryBuilder('u')
            ->delete('u')
            ->where('u.id = :id')
            ->andWhere('u.user = :user')
            ->setParameter('id', $facture)
            ->setParameter('user', $user)


        ;
        return $qb->getQuery()->getResult();
    }

}
