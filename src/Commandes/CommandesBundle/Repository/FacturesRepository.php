<?php

namespace Commandes\CommandesBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * FacturesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class FacturesRepository extends EntityRepository
{

    public function idfact($user)
    {
        $qb = $this->createQueryBuilder('u')
            ->Select('u')
            ->orderBy('u.nf', 'DESC')
            ->where('u.user = :user')
            ->setMaxResults(1)
            ->setParameter('user', $user);
        return $qb->getQuery()->getResult();
    }

    public function findByType($type,$user)
    {
        $qb = $this->createQueryBuilder('u')
            ->Select('u')
            ->Where('u.type = :type')
            ->andWhere('u.user = :user')
            ->setParameter('type', $type)
            ->setParameter('user', $user);

        return $qb->getQuery()->getResult();
    }

    public function findLast($user) {
        $qb = $this->createQueryBuilder('u')
            ->where('u.user = :user')
         ->setMaxResults(1)
        ->orderBy('u.id', 'DESC')
        ->setParameter('user', $user);
        return $qb->getQuery()->getResult();
    }

    public function search($etat,$type,$du,$au,$zone,$mot,$user,$table)
    {
        $qb = $this->createQueryBuilder('u')
            ->Select('u')
            ->innerJoin('u.zonnestocks', 'z')
            ->innerJoin('u.acheteur', 'a')
            ->innerJoin('u.ventes', 'v')
            ->innerJoin('u.tables', 't')
            ->andWhere('u.etat = :etat')

            ->andWhere('u.type = :type')
            ->andWhere('u.datecreation >= :du')
            ->andWhere('u.datecreation <= :au')
            ->andWhere(' u.nf LIKE :value')
            ->andWhere('z.id = :zone')
            ->andWhere('t.id = :table')
            ->andWhere('u.user = :user')
            ->setParameter('etat', $etat)
            ->setParameter('type', $type)
            ->setParameter('du', $du)
            ->setParameter('au', $au)
            ->setParameter('zone', $zone)
            ->setParameter('table', $table)
            ->setParameter('value', '%'.$mot.'%')

            ->setParameter('user', $user);
        ;
        return $qb->getQuery()->getResult();
    }
    public function searchSanstable($mot,$etat,$zone,$type,$du,$au,$user)
    {
        $qb = $this->createQueryBuilder('u')
            ->Select('u')
            ->innerJoin('u.zonnestocks', 'z')
            ->innerJoin('u.acheteur', 'a')

            ->andWhere(' u.nf LIKE :value')
            ->orWhere(' a.nom LIKE :value')
            ->andWhere(' u.type = :type')
            ->andWhere(' u.etat = :etat')

            ->andWhere('z.id = :zone')




            ->andwhere('u.user = :user')



            ->setParameter('value', '%'.$mot.'%')
            ->setParameter('etat', $etat)
            ->setParameter('zone', $zone)
            ->setParameter('type', $type)

            ->setParameter('user', $user);
        ;
        return $qb->getQuery()->getResult();
    }
    public function search3($etat,$type,$du,$au,$zone,$mot,$user)
    {
        $qb = $this->createQueryBuilder('u')
            ->Select('u')
            ->innerJoin('u.zonnestocks', 'z')
            ->innerJoin('u.acheteur', 'a')
            ->innerJoin('u.ventes', 'v')
            ->innerJoin('u.tables', 't')
            ->andWhere('u.etat = :etat')

            ->andWhere('u.type = :type')
            ->andWhere('u.datecreation >= :du')
            ->andWhere('u.datecreation <= :au')
            ->andWhere(' u.nf LIKE :value')
            ->andWhere('z.id = :zone')
            ->andWhere('u.user = :user')
            ->setParameter('etat', $etat)
            ->setParameter('type', $type)
            ->setParameter('du', $du)
            ->setParameter('au', $au)
            ->setParameter('zone', $zone)

            ->setParameter('value', '%'.$mot.'%')

            ->setParameter('user', $user);
        ;
        return $qb->getQuery()->getResult();
    }
    public function search2($etat,$type,$du,$au,$zone,$mot,$user)
    {
        $qb = $this->createQueryBuilder('u')
            ->Select('u')
            ->innerJoin('u.zonnestocks', 'z')
            ->innerJoin('u.acheteur', 'a')
            ->innerJoin('u.ventes', 'v')
            ->innerJoin('u.tables', 't')
            ->andWhere('u.etat = :etat')

            ->andWhere('u.type = :type')
            ->andWhere('u.datecreation >= :du')
            ->andWhere('u.datecreation <= :au')
            ->andWhere(' u.nf LIKE :value')
            ->andWhere('z.id = :zone')
            ->andWhere('t.id = :table')
            ->andWhere('u.user = :user')
            ->setParameter('etat', $etat)
            ->setParameter('type', $type)
            ->setParameter('du', $du)
            ->setParameter('au', $au)
            ->setParameter('zone', $zone)
            ->setParameter('value', '%'.$mot.'%')

            ->setParameter('user', $user);
        ;
        return $qb->getQuery()->getResult();
    }
    public function search4($etat,$type,$du,$au,$zone,$mot,$user)
    {
        $qb = $this->createQueryBuilder('u')
            ->Select('u')
            ->innerJoin('u.zonnestocks', 'z')
            ->innerJoin('u.acheteur', 'a')
            ->innerJoin('u.ventes', 'v')

            ->andWhere('u.etat = :etat')

            ->andWhere('u.type = :type')
            ->andWhere('u.datecreation >= :du')
            ->andWhere('u.datecreation <= :au')
            ->andWhere(' u.nf LIKE :value')
            ->andWhere('z.id = :zone')

            ->andWhere('u.user = :user')
            ->setParameter('etat', $etat)
            ->setParameter('type', $type)
            ->setParameter('du', $du)
            ->setParameter('au', $au)
            ->setParameter('zone', $zone)

            ->setParameter('value', '%'.$mot.'%')

            ->setParameter('user', $user);
        ;
        return $qb->getQuery()->getResult();
    }
    public function delete($facture,$user)
    {
        $qb = $this->createQueryBuilder('u')
            ->delete('u')
            ->where('u.id = :id')
            ->andWhere('u.user = :user')
            ->setParameter('id', $facture)
            ->setParameter('user', $user)


        ;
        return $qb->getQuery()->getResult();
    }

    public function graphesTTC($typeRapport,$du,$au,$grouperPar,$zone,$additionnelle,$montants,$type,$etat,$contact,$user)
    {

        $config = $this->getEntityManager()->getConfiguration();


        $qb = $this->createQueryBuilder('u')
            ->Select('u.datecreation, 
            YEAR(u.datecreation) as year, 
            QUARTER(u.datecreation) as quarter, 
             MONTH(u.datecreation) as month,
              WEEK(u.datecreation) as week,
               DAY(u.datecreation) as day,
            SUM(v.totalTTC) as total')
            ->leftJoin('u.ventes', 'v')



            ->andWhere('u.etat = :etat')
            ->andWhere('u.user = :user')




            ->setParameter('etat', $etat)
            ->setParameter('user', $user)

        ;

        return $qb->getQuery()->getResult();
    }
    public function graphesHT($typeRapport,$du,$au,$grouperPar,$zone,$additionnelle,$montants,$type,$etat,$contact,$user)
    {

        $qb = $this->createQueryBuilder('u')
            ->Select('u.datecreation, 
            YEAR(u.datecreation) as year, 
            QUARTER(u.datecreation) as quarter, 
             MONTH(u.datecreation) as month,
              WEEK(u.datecreation) as week,
               DAY(u.datecreation) as day,
            SUM(v.totalHT) as total')
            ->leftJoin('u.ventes', 'v')



            ->andWhere('u.etat = :etat')
            ->andWhere('u.user = :user')


            ->setParameter('etat', $etat)
            ->setParameter('user', $user)
        ;

        return $qb->getQuery()->getResult();
    }

}
